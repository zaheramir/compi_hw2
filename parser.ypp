%{
    #include "output.hpp"
    #include <iostream>
    
    using namespace std;
    using namespace output;
    extern int yylex();
    extern int yylineno;
    
    int yyerror(const char* message);
%}


%token INT;
%token BYTE;
%token B;
%token BOOL;
%token TRUE;
%token FALSE;
%token RETURN;
%left IF;
%left ELSE;
%token WHILE;
%token BREAK;
%token CONTINUE;
%token SC;
%token ID;
%token NUM;
%token STRING;
%right ASSIGN;
%left OR;
%left AND;
%left RELOP_V2;
%left RELOP;

%left BINOP_V2;
%left BINOP;
%right NOT;
%left RBRACE;
%left LBRACE;
%left RPAREN;
%left LPAREN;

%%

Program: Statements                                                         { printProductionRule(1); }

Statements: Statement                                                       { printProductionRule(2); }
    | Statements Statement                                                  { printProductionRule(3); }
    
Statement: LBRACE Statements RBRACE                                         { printProductionRule(4); }
    | Type ID SC                                                            { printProductionRule(5); }
    | Type ID ASSIGN Exp SC                                                 { printProductionRule(6); }
    | ID ASSIGN Exp SC                                                      { printProductionRule(7); }
    | Call SC                                                               { printProductionRule(8); }
    | RETURN SC                                                             { printProductionRule(9); }
    | IF LPAREN Exp RPAREN Statement %prec IF                               { printProductionRule(10); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement                         { printProductionRule(11); }
    | WHILE LPAREN Exp RPAREN Statement                                     { printProductionRule(12); }
    | BREAK SC                                                              { printProductionRule(13); }
    | CONTINUE SC                                                           { printProductionRule(14); }
Call: ID LPAREN Exp RPAREN                                                  { printProductionRule(15); }

Type: INT                                                                   { printProductionRule(16); }
    | BYTE                                                                  { printProductionRule(17); }
    | BOOL                                                                  { printProductionRule(18); }

Exp: LPAREN Exp RPAREN                                                      { printProductionRule(19); }
    | Exp BINOP_V2 Exp                                                      { printProductionRule(20); } 
    | Exp BINOP Exp                                                         { printProductionRule(20); }
    | ID                                                                    { printProductionRule(21); }
    | Call                                                                  { printProductionRule(22); }
    | NUM                                                                   { printProductionRule(23); }
    | NUM B                                                                 { printProductionRule(24); }
    | STRING                                                                { printProductionRule(25); }
    | TRUE                                                                  { printProductionRule(26); }
    | FALSE                                                                 { printProductionRule(27); }
    | NOT Exp                                                               { printProductionRule(28); }
    | Exp AND Exp                                                           { printProductionRule(29); }
    | Exp OR Exp                                                            { printProductionRule(30); }
    | Exp RELOP Exp                                                         { printProductionRule(31); }
    | Exp RELOP_V2 Exp                                                      { printProductionRule(31); }
    | LPAREN Type RPAREN Exp                                                { printProductionRule(32); }
%%


int main()
{
    return yyparse();
}

int yyerror(const char* message)
{
    output::errorSyn(yylineno);
    exit(0);
}
