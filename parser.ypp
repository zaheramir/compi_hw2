%{
    #include "output.hpp"
    #include <iostream>
    using namespace std;

    extern int yylex();
    extern int yylineno;
    int yyerror(const char* message);
%}

/* Tokens section */

/* Add all the reserved keywords that have no left or right association */

%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%left IF;
%left ELSE;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;

%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left RELOP_EQ;
%left RELOP;

%left BINOP_V2;
%left BINOP;
%right NOT;
%left RBRACE;
%left LBRACE;
%left RPAREN;
%left LPAREN;

%%

/* Rules section */

Program: Statements                                                              { output::printProductionRule(1); }

Statements: Statement                                                       { output::printProductionRule(2); }
    | Statements Statement                                                  { output::printProductionRule(3); }
    
Statement: LBRACE Statements RBRACE                                         { output::printProductionRule(4); }
    | Type ID SC                                                            { output::printProductionRule(5); }
    | Type ID ASSIGN Exp SC                                                 { output::printProductionRule(6); }
    | ID ASSIGN Exp SC                                                      { output::printProductionRule(7); }
    | Call SC                                                               { output::printProductionRule(8); }
    | RETURN SC                                                             { output::printProductionRule(9); }
    | IF LPAREN Exp RPAREN Statement %prec IF                                        { output::printProductionRule(10); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement                         { output::printProductionRule(11); }
    | WHILE LPAREN Exp RPAREN Statement                                     { output::printProductionRule(12); }
    | BREAK SC                                                              { output::printProductionRule(13); }
    | CONTINUE SC                                                           { output::printProductionRule(14); }
Call: ID LPAREN Exp RPAREN                                                      { output::printProductionRule(15); }

Type: INT                                                                   { output::printProductionRule(16); }
    | BYTE                                                                  { output::printProductionRule(17); }
    | BOOL                                                                  { output::printProductionRule(18); }

Exp: LPAREN Exp RPAREN                                                      { output::printProductionRule(19); }
    | Exp BINOP_V2 Exp                                                         { output::printProductionRule(20); } 
    | Exp BINOP Exp                                                         { output::printProductionRule(20); }
    | ID                                                                    { output::printProductionRule(21); }
    | Call                                                                  { output::printProductionRule(22); }
    | NUM                                                                   { output::printProductionRule(23); }
    | NUM B                                                                 { output::printProductionRule(24); }
    | STRING                                                                { output::printProductionRule(25); }
    | TRUE                                                                  { output::printProductionRule(26); }
    | FALSE                                                                 { output::printProductionRule(27); }
    | NOT Exp                                                               { output::printProductionRule(28); }
    | Exp AND Exp                                                           { output::printProductionRule(29); }
    | Exp OR Exp                                                            { output::printProductionRule(30); }

    | Exp RELOP Exp                                                         { output::printProductionRule(31); }
    | Exp RELOP_EQ Exp                                                         { output::printProductionRule(31); }


    
    
    | LPAREN Type RPAREN Exp                                                { output::printProductionRule(32); }
%%

/* Functions section */

int main()
{
    return yyparse();
}

int yyerror(const char* message)
{
    output::errorSyn(yylineno);
    exit(0);
}