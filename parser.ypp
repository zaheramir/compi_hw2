%{
    #include <stdio.h>
    #include <iostream>
    #include "output.hpp"

    using namespace std;
    using namespace output;

    extern int yylineno;
    extern int yylex();

    int yyerror(const char* msg);
%}


%token BOOL INT BYTE B
%token TRUE FALSE
%token WHILE RETURN
%token BREAK CONTINUE
%token SC STRING ID NUM

%right ASSIGN
%right IF
%right ELSE
%right NOT
%left OR
%left AND
%left RELOP
%left LPAREN RPAREN LBRACE RBRACE
%left BINOP

%%
Program: Statements             {printProductionRule(1);}
    ;

Statements: Statement       {printProductionRule(2);}
    | Statements Statement  {printProductionRule(3);}
    ;

Statement: LBRACE Statements RBRACE { printProductionRule(4); }
    | Type ID SC { printProductionRule(5); }
    | Type ID ASSIGN Exp SC { printProductionRule(6); }
    | ID ASSIGN Exp SC { printProductionRule(7); }
    | Call SC { printProductionRule(8); }
    | RETURN SC { printProductionRule(9); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement          {printProductionRule(11);}
    | IF LPAREN Exp RPAREN Statement                         {printProductionRule(10);}
    | WHILE LPAREN Exp RPAREN Statement                      {printProductionRule(12);}
    | BREAK SC                                               {printProductionRule(13);}
    | CONTINUE SC                                            {printProductionRule(14);}
    ;

Call: ID LPAREN Exp RPAREN {printProductionRule(15);}
    ;

Type: INT {printProductionRule(16);}
    | BYTE {printProductionRule(17);}
    | BOOL {printProductionRule(18);}
    ;

Exp: LPAREN Exp RPAREN {printProductionRule(19);}
    | Exp BINOP Exp {printProductionRule(20);}
    | ID {printProductionRule(21);}
    | Call {printProductionRule(22);}
    | NUM {printProductionRule(23);}
    | NUM B {printProductionRule(24);}
    | STRING {printProductionRule(25);}
    | TRUE {printProductionRule(26);}
    | FALSE {printProductionRule(27);}
    | NOT Exp {printProductionRule(28);}
    | Exp AND Exp {printProductionRule(29);}
    | Exp OR Exp {printProductionRule(30);}
    | Exp RELOP Exp {printProductionRule(31);}
    | LPAREN Type RPAREN Exp {printProductionRule(32);}
    ;

%%

int main()
{
        return yyparse();
}

int yyerror(const char* msg)
{
	errorSyn(yylineno);
	exit(0);
}
